import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
from sklearn.metrics import accuracy_score
import warnings

warnings.filterwarnings('ignore')

np.random.seed(42)

# Generate data
values = np.random.rand(100)
labels = []
# Assign class labels based on the value
for i in values[:50]:
    if i <= 0.5:
        labels.append('Class1')
    else:
        labels.append('Class2')

# Add None for unlabeled data
labels += [None] * 50

# Print the labels
print(labels)
# Create the DataFrame
data = {
    "Point": [f"x{i+1}" for i in range(100)],
    "Value": values,
    "Label": labels
}
df = pd.DataFrame(data)
df.head()
# Visualize the histogram for numeric columns
num_col = df.select_dtypes(include=['int', 'float']).columns
for col in num_col:
    df[col].hist(bins=10, alpha=0.5, edgecolor='black', grid=False)
    plt.title(f'Histogram for {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()
# Separate labeled and unlabeled data
labeled_df = df[df["Label"].notna()]
X_train = labeled_df["Value"].values.reshape(-1, 1)  # Reshaping to 2D for KNN
y_train = labeled_df["Label"]
unlabeled_df = df[df["Label"].isna()]
X_test = unlabeled_df["Value"].values.reshape(-1, 1)  # Reshaping to 2D for KNN

# Generate true labels for the unlabeled test set
true_labels = ["Class1" if x <= 0.5 else "Class2" for x in values[50:]]
# Define k values for KNN
k_values = [1, 2, 3, 4, 5, 20, 30]
results = {}  # Corrected variable name
accuracies={}

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k) 
    knn.fit(X_train, y_train)
    predictions = knn.predict(X_test) 
    results[k] = predictions
# Calculate accuracy
    accuracy=accuracy_score (true_labels, predictions) * 100
    accuracies[k] = accuracy
    print (f"Accuracy for k={k}: {accuracy:.2f}%")
# Assign predictions back to the DataFrame for this k unlabeled_df[f"Label_k{k}"] = predictions
    unlabeled_df[f"Label_k{k}"]=predictions
    
    # Step 5: Visualization with clusters
    plt.figure(figsize=(10, 6))

    # Plot Labeled data (Unclassified data)
    plt.scatter(X_train, [1] * len(X_train), c=["blue" if lbl == "Class1" else "red" for lbl in y_train],
                label="Unclassified", marker="o", s=100)

    # Plot classified data (Classified data)
    plt.scatter(X_test, [2] * len(X_test), c=["blue" if lbl == "Class1" else "red" for lbl in predictions],
                label="Classified", marker="x", s=100)

    plt.xlabel("x values")
    plt.ylabel("Classified/Unclassified")
    plt.title(f"KNN Classification (k={k})")
    plt.legend()
    plt.show()
